name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  run-syntax-check:
    runs-on: ubuntu-latest
    container: php:8.3-fpm
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: docker_db
          MYSQL_ROOT_PASSWORD: 1Qaz2Wsx
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
    env:
      DB_DATABASE: docker_db
      DB_USER: root
      DB_PASSWORD: 1Qaz2Wsx
    steps:
      - uses: actions/checkout@v3
      - name: 執行語法檢查
        run: |
          find ./tests -name '*.php' -print0 | xargs -0 -n1 php -l
          find ./app -name '*.php' -print0 | xargs -0 -n1 php -l

  PHP-Env-Install-And-Test:
    runs-on: ubuntu-latest
    needs: run-syntax-check
    container:
      image: php:8.3-fpm
    services:
      db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 1Qaz2Wsx
          MYSQL_DATABASE: docker_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
    env:
      DB_DATABASE: docker_db
      DB_USER: root
      DB_PASSWORD: 1Qaz2Wsx
    steps:
      - name: 安裝依賴
        run: |
          apt-get update && apt-get install -y \
          libzip-dev \
          libonig-dev \
          build-essential \
          libpng-dev \
          libjpeg62-turbo-dev \
          libfreetype6-dev \
          locales \
          zip \
          jpegoptim optipng pngquant gifsicle \
          vim \
          unzip \
          git \
          curl \
          default-mysql-client
      - name: 安裝 PHP 擴展
        run: |
          docker-php-ext-install pdo_mysql mbstring zip exif pcntl bcmath
          docker-php-ext-configure gd --with-jpeg=/usr/include/ --with-freetype=/usr/include/
          docker-php-ext-install gd
      - name: 安裝 Xdebug
        run: |
          pecl install xdebug
          docker-php-ext-enable xdebug
      - name: 安裝 composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php
          php -r "unlink('composer-setup.php');"
          mv composer.phar /usr/local/bin/composer
      - uses: actions/checkout@v3
      - name: 使用 composer 安裝套件
        run: |
          composer install
      - name: Copy .env
        run: cp .env.example .env
      - name: Generate Key
        run: php artisan key:generate
      - name: 執行測試
        run: |
          XDEBUG_MODE=coverage ./vendor/bin/phpunit --coverage-html html-coverage/
      - name: 上傳測試報告
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: html-coverage

  deploy:
    runs-on: ubuntu-latest
    needs: PHP-Env-Install-And-Test

    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: 下載 test report
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report
          path: html-coverage
      - name: 準備要部署的檔案
        run: |
          mkdir public
          mv html-coverage public/.
      - name: 上傳到 artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
